name: Docker Image CI

on:
  push:
    branches: [ main ]
env:
  IMAGE_NAME: ${{ secrets.DOCKER_USER }}/sflask

jobs:

  Dockerfile-scan:
    name: FileScan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create reports folder
      run: mkdir -p reports

    - name: Scan Dockerfile with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: config
        scan-ref: ./Dockerfile
        format: table
        exit-code: 1   # fail if misconfigs found
        output: reports/dockerfile-scan.md
        
    - name: Upload FileScan as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
          name: Dockerfile-report
          path: reports/dockerfile-scan.md
          retention-days: 1

  Build:
    name: build
    needs: Dockerfile-scan
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set_tag.outputs.image_tag }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Docker login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set IMAGE_TAG
      id: set_tag
      run: echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      
    - name: Build the Docker image
      run: |
        docker build -t $IMAGE_NAME:${{ steps.set_tag.outputs.image_tag }} .

    - name: Save Docker image as artifact
      run: |
          IMAGE_TAG=${{ steps.set_tag.outputs.image_tag }}
          docker save $IMAGE_NAME:$IMAGE_TAG | gzip > image.tar.gz

    - uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: image.tar.gz

  Scan_and_Push:
    name: scan and push
    needs: [Dockerfile-scan, Build]
    runs-on: ubuntu-latest
    outputs:
      HIGH: ${{ steps.vuln.outputs.high }}
      CRITICAL: ${{ steps.vuln.outputs.critical }}
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Create reports folder
      run: mkdir -p reports

    - uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        docker load < image.tar.gz
      
    - name: Run Trivy scan Report
      uses: aquasecurity/trivy-action@0.21.0
      with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ needs.Build.outputs.IMAGE_TAG }}
          severity: CRITICAL,HIGH
          vuln-type: os,library
          exit-code: '1' 
          format: "table"
          output: reports/trivy-report.md

    # Run Trivy scan (JSON) for severity count
    - name: Run Trivy scan (JSON)
      if: always()
      uses: aquasecurity/trivy-action@0.21.0
      with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ needs.Build.outputs.IMAGE_TAG }}
          severity: CRITICAL,HIGH
          vuln-type: os,library
          format: json
          output: reports/trivy-report.json

    - name: Count vulnerabilities by severity
      if: always()
      id: vuln
      run: |
          high=$(jq '[.. | .Severity? // empty | select(. == "HIGH")] | length' reports/trivy-report.json)
          critical=$(jq '[.. | .Severity? // empty | select(. == "CRITICAL")] | length' reports/trivy-report.json)

          echo "high=$high" >> $GITHUB_OUTPUT
          echo "critical=$critical" >> $GITHUB_OUTPUT
          
    - name: List reports folder
      if: always()
      run: ls -R reports

    - name: Upload Trivy report as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
          name: trivy-report
          path: reports/trivy-report.md
          retention-days: 1

    - name: Push to docker hub
      if: success()
      run : |   
          docker push $IMAGE_NAME:${{ needs.Build.outputs.IMAGE_TAG }}
          
  Summary:
    name: summary
    runs-on: ubuntu-latest
    needs: [Dockerfile-scan, Build, Scan_and_Push]
    outputs:
      failed_jobs_name: ${{ steps.collect.outputs.failed }}
    if: always()
    steps:
      - name: Summarize failed jobs dynamically
        id: collect
        run: |
          echo "## Jobs Summary" > summary.md

          # Dump the whole "needs" context as JSON
          echo '${{ toJSON(needs) }}' > needs.json

          # Parse dynamically
          for job in $(jq -r 'keys[]' needs.json); do
            result=$(jq -r --arg job "$job" '.[$job].result' needs.json)
            if [ "$result" = "failure" ]; then
              echo "### ‚ùå Job: $job" >> summary.md
              failed="$failed $job"
              echo "(Steps info is only in logs)" >> summary.md
            elif [ "$result" = "success" ]; then
              echo "‚úÖ Job: $job passed" >> summary.md
            else
              echo "‚ö™ Job: $job ‚Üí $result" >> summary.md
            fi
          done

          failed=$(echo "$failed" | xargs) # trim spaces
          echo "failed=$failed" >> $GITHUB_OUTPUT

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat summary.md
          echo "EOF" >> $GITHUB_OUTPUT
  
  Notify-Clickup:
    name: clickup notification
    needs: [Dockerfile-scan, Build, Scan_and_Push, Summary]
    runs-on: ubuntu-latest
    if: always()
    steps:
  
    - name: Send deployment notification to ClickUp
      env:
        CLICKUP_WORKSPACE_ID: ${{ secrets.CLICKUP_WORKSPACE_ID }}
        CLICKUP_CHANNEL_ID: ${{ secrets.CLICKUP_CHANNEL_ID }}
        CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        repo: ${{ github.repository }}
        run_id: ${{ github.run_id }}

      run: |
          REPO_LINK="https://github.com/${GITHUB_REPOSITORY}"
          COMMIT_LINK="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
          
          if [ "${{ needs.Scan_and_Push.result }}" = "success" ]; then
    
            STATUS_ICON="üü¢"
            STATUS_TEXT="SUCCESS"
            MESSAGE="#### Build Result Overview
            **Build Status :** ${STATUS_TEXT} ${STATUS_ICON} 
            **Repository :** [${GITHUB_REPOSITORY}](${REPO_LINK})  
            **Commit ID :** [${GITHUB_SHA::7}](${COMMIT_LINK})
            **Commit Message:** ${COMMIT_MESSAGE}
            **Description :** ${COMMIT_MESSAGE} on **${GITHUB_REF_NAME}** of \`${GITHUB_REPOSITORY}\`
            **Pushed By :** ${GITHUB_ACTOR}

            ---
            ### Trivy Docker image scan completed ‚úÖ
            - üê≥ Image: ${{ env.IMAGE_NAME }}:${{ needs.Build.outputs.IMAGE_TAG }}
            - üî¥ CRITICAL: **${{ needs.Scan_and_Push.outputs.CRITICAL }}**
            - üü† HIGH: **${{ needs.Scan_and_Push.outputs.HIGH }}**"
            
          else
            STATUS_ICON="üî¥"
            STATUS_TEXT="FAILURE"
            JOB_NAME="${{ github.job }}"
            FAIL_REASON="${{needs.Summary.outputs.failed_jobs_name}}"

            MESSAGE="#### Build Result Overview
            **Build Status :** ${STATUS_TEXT} ${STATUS_ICON} 
            **Repository :** [${GITHUB_REPOSITORY}](${REPO_LINK})  
            **Commit ID :** [${GITHUB_SHA::7}](${COMMIT_LINK})
            **Commit Message:** ${COMMIT_MESSAGE}
            **Description :** ${COMMIT_MESSAGE} on **${GITHUB_REF_NAME}** of \`${GITHUB_REPOSITORY}\`
            **Pushed By :** ${GITHUB_ACTOR}
            **Failed On:** ${FAIL_REASON}

            ---
            ### Trivy Docker image scan completed ‚úÖ
            - üê≥ Image: ${{ env.IMAGE_NAME }}:${{ needs.Build.outputs.IMAGE_TAG }}
            - üî¥ CRITICAL: **${{ needs.Scan_and_Push.outputs.CRITICAL }}**
            - üü† HIGH: **${{ needs.Scan_and_Push.outputs.HIGH }}**
            - üìÑ Download Report: ('https://github.com/${repo}/actions/runs/${run_id}')"
            
          fi
      
          curl --request POST \
            --url "https://api.clickup.com/api/v3/workspaces/${CLICKUP_WORKSPACE_ID}/chat/channels/${CLICKUP_CHANNEL_ID}/messages" \
            --header "Authorization: ${CLICKUP_API_TOKEN}" \
            --header "accept: application/json" \
            --header "content-type: application/json" \
            --data "$(jq -n \
              --arg type "message" \
              --arg content_format "text/md" \
              --arg content "$MESSAGE" \
              '{type: $type, content_format: $content_format, content: $content}')"
